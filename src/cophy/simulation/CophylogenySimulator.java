/**
 * CophylogenySimulator.java
 * 
 * Cophy: Cophylogenetics for BEAST
 * 
 * Copyright (C) 2014 Arman D. Bilge <armanbilge@gmail.com>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package cophy.simulation;

import cophy.model.AbstractCophylogenyModel;
import dr.evolution.tree.NodeRef;
import dr.evolution.tree.SimpleNode;
import dr.evolution.tree.SimpleTree;
import dr.evolution.tree.Tree;

/**
 * 
 * @author Arman D. Bilge <armanbilge@gmail.com>
 *
 */
public abstract class CophylogenySimulator<T extends AbstractCophylogenyModel> {

    public static final String HOST = "host";
    protected static final String EXTINCT = "extinct";

    protected final T model;
    protected final boolean complete;
    
    public CophylogenySimulator(final T model, final boolean complete) {
        this.model = model;
        this.complete = complete;
    }
    
    public Tree simulateTree() {
        return simulateTree(0.0);
    }
    
    public Tree simulateTree(final double until) {
        
        final NodeRef hostRoot = model.getHostTree().getRoot();
        final double originHeight = model.getOriginHeight();
        final SimpleNode root = simulateSubtree(hostRoot, originHeight, until);
        return new SimpleTree(root);
        
    }
    
    public void resumeSimulation(final Tree tree, final double until) {
        
        if (!(tree instanceof SimpleTree))
            throw new RuntimeException("Tree not generated by a"
                    + " CophylogenySimulator.");
        
        if (!complete)
            throw new RuntimeException("Cannot resume incomplete simulation");
        
        for (int i = 0; i < tree.getExternalNodeCount(); ++i) {
            final SimpleNode node = (SimpleNode) tree.getExternalNode(i);
            if (node.getAttribute(EXTINCT) == null)
                // Does not have EXTINCT attribute
                simulateSubtree(node,
                                (NodeRef) node.getAttribute(HOST),
                                node.getHeight(),
                                until);
        }
    }

    protected SimpleNode simulateSubtree(final NodeRef hostNode,
            final double height,
            final double until) {

        return simulateSubtree(new SimpleNode(), hostNode, height, until);

    }

    protected abstract SimpleNode simulateSubtree(final SimpleNode guestNode,
                                                  final NodeRef hostNode,
                                                  double height,
                                                  final double until);
    
    public CophylogeneticTrajectory createTrajectory() {
        return new CophylogeneticTrajectory(model.getOriginHeight(),
                                            model.getHostTree());
    }
    
    public CophylogeneticTrajectory simulateTrajectory() {
        return simulateTrajectory(0.0);
    }
    
    public CophylogeneticTrajectory simulateTrajectory(final double until) {
        
        final CophylogeneticTrajectory trajectory = createTrajectory();
        resumeSimulation(trajectory, until);
        return trajectory;
    }
    
    public abstract void
            resumeSimulation(final CophylogeneticTrajectory trajectory,
                             final double until);
    
    public abstract double
            simulateBirthEvent(final CophylogeneticTrajectory trajectory,
                               final double height,
                               final NodeRef source);
    
    public T getModel() {
        return model;
    }
}
